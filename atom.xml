<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Cassidy Pignatello]]></title>
  <link href="http://cassidypignatello.github.io/atom.xml" rel="self"/>
  <link href="http://cassidypignatello.github.io/"/>
  <updated>2014-06-25T00:30:54-04:00</updated>
  <id>http://cassidypignatello.github.io/</id>
  <author>
    <name><![CDATA[Cassidy Pignatello]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Self, the Vagabond of Ruby]]></title>
    <link href="http://cassidypignatello.github.io/blog/2014/06/24/self/"/>
    <updated>2014-06-24T20:52:44-04:00</updated>
    <id>http://cassidypignatello.github.io/blog/2014/06/24/self</id>
    <content type="html"><![CDATA[<p>A few weeks ago in my Ruby class, we were introduced to the concept of <code>self</code>. This can be particularly challenging to wrap your head around, especially if you&rsquo;re new to programming in general.</p>

<!--more-->


<p>An important thing to understand right off the bat is that every line of code in Ruby is executed against a particular <code>self</code>. A method call is always sending a message to a reciever. The <code>self</code> keyword gives you access to the current object &ndash; in other words, the object that is currently recieving the message. To further illustrate, I&rsquo;ve outlined a couple use cases for when you&rsquo;d want to use <code>self</code>.</p>

<h2>Class Methods</h2>

<p>Probably the most common usage of <code>self</code> is when defining class methods. Using the <code>def</code> keyword inside of a class will create a new instance method:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="k">class</span> <span class="nc">Vagabond</span>
</span><span class='line'>  <span class="kp">attr_writer</span> <span class="ss">:home</span>
</span><span class='line'>
</span><span class='line'>  <span class="k">def</span> <span class="nf">print_home</span>
</span><span class='line'>    <span class="nb">puts</span> <span class="s2">&quot;My home is </span><span class="si">#{</span><span class="vi">@home</span><span class="si">}</span><span class="s2">&quot;</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'><span class="k">end</span>
</span><span class='line'>
</span><span class='line'><span class="n">v</span> <span class="o">=</span> <span class="no">Vagabond</span><span class="o">.</span><span class="n">new</span>
</span><span class='line'><span class="n">v</span><span class="o">.</span><span class="n">home</span> <span class="o">=</span> <span class="s2">&quot;nowhere, I like to wander around.&quot;</span>
</span><span class='line'><span class="n">v</span><span class="o">.</span><span class="n">print_home</span>
</span><span class='line'><span class="c1">#=&gt; &quot;My home is nowhere, I like to wander around.&quot;</span>
</span></code></pre></td></tr></table></div></figure>


<p>Within a class, <code>self</code> refers to the current Class (in this case <code>Vagabond</code>), which is itself an instance of the class <code>Class</code>. I know, bear with me here. Defining a method on <code>self</code> then creates a class method:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="k">class</span> <span class="nc">Vagabond</span>
</span><span class='line'>  <span class="k">def</span> <span class="nc">self</span><span class="o">.</span><span class="nf">print_home</span>
</span><span class='line'>    <span class="nb">puts</span> <span class="s2">&quot;My home is nowhere, I like to wander around.&quot;</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'><span class="k">end</span>
</span><span class='line'>
</span><span class='line'><span class="no">Vagabond</span><span class="o">.</span><span class="n">print_home</span>
</span><span class='line'><span class="c1">#=&gt; &quot;My home is nowhere, I like to wander around.&quot;    </span>
</span></code></pre></td></tr></table></div></figure>


<p>Another way you could do this is to define a method within the <code>Class</code> instance itself. This uses the keyword <code>self</code> to open up a new context where the <code>Class</code> instance is held in <code>self</code>:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="k">class</span> <span class="nc">Vagabond</span>
</span><span class='line'>  <span class="k">class</span> <span class="o">&lt;&lt;</span> <span class="nb">self</span>
</span><span class='line'>    <span class="k">def</span> <span class="nf">print_home</span>
</span><span class='line'>      <span class="nb">puts</span> <span class="s2">&quot;My home is nowhere, I like to wander around.&quot;</span>
</span><span class='line'>    <span class="k">end</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'><span class="k">end</span>
</span><span class='line'>
</span><span class='line'><span class="no">Vagabond</span><span class="o">.</span><span class="n">print_home</span>
</span><span class='line'><span class="c1">#=&gt; &quot;My home is nowhere, I like to wander around.&quot;</span>
</span></code></pre></td></tr></table></div></figure>


<h2>Disambiguation</h2>

<p>Another case in which <code>self</code> is especially useful is when assigning a value to an object&rsquo;s attributes:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="k">class</span> <span class="nc">Book</span>
</span><span class='line'>  <span class="kp">attr_accessor</span> <span class="ss">:title</span>
</span><span class='line'>
</span><span class='line'>  <span class="k">def</span> <span class="nf">replace_title</span><span class="p">(</span><span class="n">new_title</span><span class="p">)</span>
</span><span class='line'>    <span class="n">title</span> <span class="o">=</span> <span class="n">new_title</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'>
</span><span class='line'>  <span class="k">def</span> <span class="nf">print_title</span>
</span><span class='line'>    <span class="nb">puts</span> <span class="n">title</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'><span class="k">end</span>
</span><span class='line'>
</span><span class='line'><span class="n">b</span> <span class="o">=</span> <span class="no">Book</span><span class="o">.</span><span class="n">new</span>
</span><span class='line'><span class="n">b</span><span class="o">.</span><span class="n">title</span> <span class="o">=</span> <span class="s2">&quot;Still Life With Woodpecker&quot;</span>
</span><span class='line'><span class="n">b</span><span class="o">.</span><span class="n">replace_title</span><span class="p">(</span><span class="s2">&quot;Jitterbug Perfume&quot;</span><span class="p">)</span>
</span><span class='line'><span class="n">b</span><span class="o">.</span><span class="n">print_title</span>
</span><span class='line'><span class="c1">#=&gt; &quot;Still Life With Woodpecker&quot;</span>
</span></code></pre></td></tr></table></div></figure>


<p>Although we replaced the book title with &ldquo;Jitterbug Perfume&rdquo;, it remained set to &ldquo;Still Life With Woodpecker&rdquo; &ndash; which is what we see when we call <code>print_title</code>. That&rsquo;s because the assignment inside <code>replace_title</code> is assigned to a local variable called <code>title</code>, which isn&rsquo;t being used for anything. If we were to change line 5 to <code>self.title = new_title</code>, then the method call would return &ldquo;Jitterbug Perfume&rdquo; as was expected. It&rsquo;s not necessary to use <code>self.title</code> explicitly inside the method <code>print_title</code>, because Ruby is smart enough to know that there&rsquo;s no local variable with that name and will then send <code>self</code> the message <code>title</code>. Remember how I mentioned that a method call always sends a message to a reciever? Well, <code>self</code> can also be defined as an implicit reciever. That is, if you call a method without an explicit recieving object, the method is implicitly called on <code>self</code>.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[My Zeroth Post]]></title>
    <link href="http://cassidypignatello.github.io/blog/2014/06/10/my-first-post-on-octopress/"/>
    <updated>2014-06-10T10:42:32-04:00</updated>
    <id>http://cassidypignatello.github.io/blog/2014/06/10/my-first-post-on-octopress</id>
    <content type="html"><![CDATA[<p>Thanks for stumbling across my zeroth post on my very zeroth blog. Why zeroth? We&rsquo;ll get to that in just a little bit.</p>

<!--more-->


<p>Since starting the RUBY-005 class at Flatiron School, we&rsquo;ve been beginning lecture by focusing on a different programmer each day and discussing their contributions to computing. My favorite so far has definitely been <a href="http://en.wikipedia.org/wiki/Edsger_Dijkstra" target="_blank">Edsger Dijkstra</a>. Besides him being the father of structured programming (something I am immensely grateful for), I found his sense of humor to be incredibly refreshing. Here are a couple of my favorite quotes of his below:</p>

<p><em>&ldquo;About the use of language: it is impossible to sharpen a pencil with a blunt axe. It is equally vain to try to do it with ten blunt axes instead.&rdquo;</em></p>

<p><em>&ldquo;It is practically impossible to teach good programming to students that have had a prior exposure to BASIC: as potential programmers they are mentally mutilated beyond hope of regeneration.&rdquo;</em></p>

<p>Wow, harsh. Pretty much the entirety of my experience with BASIC centered around playing the QBasic game <a href="http://en.wikipedia.org/wiki/Gorillas_(video_game)" target="_blank">Gorillas</a> when I was in elementary school. That statement alone makes me happy I never took my curiousity further than that.</p>

<p>One of the first hang-ups I had as a coding beginner was the concept of zero-based numbering; that the first element in a given array has an index of 0, not 1. It was really more of a minor annoyance than anything else &ndash; everything I had encountered up until this point began with a count of 1, and the habit of thinking in that manner found me making the same mistakes in my code over and over again.</p>

<p>Dijkstra argued in favor of zero-based numbering in a <a href="http://www.cs.utexas.edu/users/EWD/transcriptions/EWD08xx/EWD831.html" target="_blank">paper</a> he wrote while at the University of Texas. I still can&rsquo;t say I completely agree with the use of it semantically, but it was very interesting to gain a new perspective on how it makes sense from a mathematical standpoint.</p>

<p>His argument centers around the idea that expressing the range of a<br> variable <strong>i</strong> as <strong>x &lt;= i &lt; y</strong> offers advantages over any other combination of inequalities. Besides his belief that zero is the smallest natural number, I found the following reasons to be the most compelling for its usage:</p>

<p>&bull; In some tasks it&rsquo;s useful to ask <em>&ldquo;How many values occured <strong>i</strong> times?</em>&rdquo; Placing such values in an array requires beginning the indices at 0; in the case one has the possibility that some values occurred zero times.</p>

<p>&bull; Consecutive ranges have matching end-points:
<strong>x &lt;= i &lt; y</strong> followed by <strong>y &lt;= i &lt; z</strong> yields <strong>x &lt;= i &lt; z</strong>.</p>

<p>&bull; The length of the range is the difference of its endpoints:
<strong>0 &lt;= i &lt; 10</strong> has ten elements, as does <strong>5 &lt;= i &lt; 15</strong>.</p>

<p>&bull; In iterative algorithms that count from zero, the current
value of the count always equals the number of previous
iterations.</p>

<p>&bull; For a zero-origin array, the index indicates the
displacement from the origin.</p>

<p>I believe that the language should adapt to the user when at all possible, not the other way around. However, Dijkstra makes a lot of points that are very difficult to counter. At least for my decidedly un-mathy brain.</p>
]]></content>
  </entry>
  
</feed>
