<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: Flatiron&nbsp;School | Cassidy Pignatello]]></title>
  <link href="http://cassidypignatello.github.io/blog/categories/flatiron-school/atom.xml" rel="self"/>
  <link href="http://cassidypignatello.github.io/"/>
  <updated>2014-10-01T16:36:20-04:00</updated>
  <id>http://cassidypignatello.github.io/</id>
  <author>
    <name><![CDATA[Cassidy Pignatello]]></name>
    <email><![CDATA[cassidy.pignatello@gmail.com]]></email>
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Integrating Stripe Into Your Rails App]]></title>
    <link href="http://cassidypignatello.github.io/blog/2014/09/25/integrating-stripe-into-your-rails-app/"/>
    <updated>2014-09-25T18:53:11-04:00</updated>
    <id>http://cassidypignatello.github.io/blog/2014/09/25/integrating-stripe-into-your-rails-app</id>
    <content type="html"><![CDATA[<p>About a month ago, I gave a technical talk at The Flatiron School along with <a href="http://www.twitter.com/zackshp" target="_blank">Zack Sheppard</a> and <a href="http://www.twitter.com/dsully360" target="_blank">Daniel Sullivan</a> about <a href="https://stripe.com/" target="_blank">Stripe</a>. Stripe is a really powerful and simplified way to implement a payments infrastructure and checkout functionality into your application.<!--more-->
In addition to it being easy to add payment forms through Stripe Checkout, it&rsquo;s also completely secure. They have fraud protection, PCI Service Provider Level 1 certification, and optional two-factor authentication. Even if someone does manage to hack into your application, you&rsquo;re never actually storing any of your customer&rsquo;s credit card information. I could go on and on, but that would probably ruin the whole point of showing you the video, right? Take a look below for our presentation on why Stripe is useful, and how we integrated it into <a href="https://github.com/cassidypignatello/laser-spirit">Laser Spirit</a> &ndash; a Rails engine we created as a simplified e-commerce platform to mount onto your host application, a la Shopify or Spree.</p>

<p>Password: <strong>summer2014</strong>
<div class="embed-video-container"><iframe src="//player.vimeo.com/video/104331278 "></iframe></div></p>

<p>Thanks for watching!</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[What Beer Can Teach You About Recursion]]></title>
    <link href="http://cassidypignatello.github.io/blog/2014/08/24/what-beer-can-teach-you-about-recursion/"/>
    <updated>2014-08-24T20:27:23-04:00</updated>
    <id>http://cassidypignatello.github.io/blog/2014/08/24/what-beer-can-teach-you-about-recursion</id>
    <content type="html"><![CDATA[<p>As the semester at The Flatiron School wraps up, we&rsquo;ve been practicing how to solve some pretty common computer science problems that might come up in a technical interview. While these problems can be pretty intimidating at first, one of the best ways to approach them is by breaking them down into smaller pieces that can then be combined to give a solution to the original problem.</p>

<!--more-->


<p>This is typically called a divide and conquer (or D&amp;C) algorithm, and works by using recursion. I thought it&rsquo;d be helpful to demonstrate one of the simplest implementations of a recursive method that I&rsquo;ve come across, since some of the examples out there might be overwhelming to an absolute beginner. Before we get into that, let&rsquo;s define what an algorithm and recursion actually are.</p>

<h2>Definitions</h2>

<p>An <strong>algorithm</strong> is a step-by-step set of instructions for solving a problem, while <strong>recursion</strong> is a function that calls itself. You&rsquo;re essentially creating a loop, and there are plenty of arguments out there for why it makes more sense to use an iterator to solve a problem. Recursion is still extremely valuble to learn in that it will help you to understand how looping works.</p>

<h2>Components of Recursive Algorithms</h2>

<p>When setting up a recursive algorithm, it&rsquo;s essential to define two things. A <strong>recursive case</strong> that will initiate the recursion, and a <strong>base case</strong> that will break the recursion. If you forget to do that, you&rsquo;ll most likely see a <strong>stack level too deep</strong> or <strong>stack overflow</strong> error. This means either your base case was incorrectly defined, or you ran out of memory.</p>

<h2>Implementing a Recursive Algorithm</h2>

<p>Okay, now that we&rsquo;ve got that out of the way, let&rsquo;s solve a problem. We&rsquo;re going to define a recursive algorithm called <code>bottles_of_beer</code> that takes a number as an argument and prints the number of bottles of beer we have until there aren&rsquo;t any left. Of course, we&rsquo;ll be doing this in the style of a classic song:</p>

<p>```ruby
def bottles_of_beer(n)
  if n == 0 # base case for breaking the recursion</p>

<pre><code>puts "No more bottles of beer on the wall!"
</code></pre>

<p>  else # recursive case for triggering the recursion</p>

<pre><code>puts "#{n} bottles of beer on the wall, #{n} bottles of beer. Take one down and pass it around, #{n-1} bottles of beer on the wall."
bottles_of_beer(n-1)
</code></pre>

<p>  end
end
<code>``
So we've defined a method above that takes a number</code>n<code>as an argument. If</code>n<code>is equal to 0, we break our recursion and print the corresponding statement. Otherwise, we trigger the recursion, print a different statement, and then subtract 1 from</code>n<code>, thereby passing that new</code>n<code>in as our argument to call</code>bottles_of_beer` again.</p>

<p>Why don&rsquo;t you open up <code>irb</code> and try it out? I promise it&rsquo;ll make that beer (or sparkling apple juice) you have afterwards that much sweeter.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[My Zeroth Post]]></title>
    <link href="http://cassidypignatello.github.io/blog/2014/06/10/my-first-post-on-octopress/"/>
    <updated>2014-06-10T10:42:32-04:00</updated>
    <id>http://cassidypignatello.github.io/blog/2014/06/10/my-first-post-on-octopress</id>
    <content type="html"><![CDATA[<p>Thanks for stumbling across my zeroth post on my very zeroth blog. Why zeroth? We&rsquo;ll get to that in just a little bit.</p>

<!--more-->


<p>Since starting the RUBY-005 class at Flatiron School, we&rsquo;ve been beginning lecture by focusing on a different programmer each day and discussing their contributions to computing. My favorite so far has definitely been <a href="http://en.wikipedia.org/wiki/Edsger_Dijkstra" target="_blank">Edsger Dijkstra</a>. Besides him being the father of structured programming (something I am immensely grateful for), I found his sense of humor to be incredibly refreshing. Here are a couple of my favorite quotes of his below:</p>

<p><em>&ldquo;About the use of language: it is impossible to sharpen a pencil with a blunt axe. It is equally vain to try to do it with ten blunt axes instead.&rdquo;</em></p>

<p><em>&ldquo;It is practically impossible to teach good programming to students that have had a prior exposure to BASIC: as potential programmers they are mentally mutilated beyond hope of regeneration.&rdquo;</em></p>

<p>Wow, harsh. Pretty much the entirety of my experience with BASIC centered around playing the QBasic game <a href="http://en.wikipedia.org/wiki/Gorillas_(video_game)" target="_blank">Gorillas</a> when I was in elementary school. That statement alone makes me happy I never took my curiousity further than that.</p>

<p>One of the first hang-ups I had as a coding beginner was the concept of zero-based numbering; that the first element in a given array has an index of 0, not 1. It was really more of a minor annoyance than anything else &ndash; everything I had encountered up until this point began with a count of 1, and the habit of thinking in that manner found me making the same mistakes in my code over and over again.</p>

<p>Dijkstra argued in favor of zero-based numbering in a <a href="http://www.cs.utexas.edu/users/EWD/transcriptions/EWD08xx/EWD831.html" target="_blank">paper</a> he wrote while at the University of Texas. I still can&rsquo;t say I completely agree with the use of it semantically, but it was very interesting to gain a new perspective on how it makes sense from a mathematical standpoint.</p>

<p>His argument centers around the idea that expressing the range of a<br> variable <strong>i</strong> as <strong>x &lt;= i &lt; y</strong> offers advantages over any other combination of inequalities. Besides his belief that zero is the smallest natural number, I found the following reasons to be the most compelling for its usage:</p>

<p>&bull; In some tasks it&rsquo;s useful to ask <em>&ldquo;How many values occured <strong>i</strong> times?</em>&rdquo; Placing such values in an array requires beginning the indices at 0; in the case one has the possibility that some values occurred zero times.</p>

<p>&bull; Consecutive ranges have matching end-points:
<strong>x &lt;= i &lt; y</strong> followed by <strong>y &lt;= i &lt; z</strong> yields <strong>x &lt;= i &lt; z</strong>.</p>

<p>&bull; The length of the range is the difference of its endpoints:
<strong>0 &lt;= i &lt; 10</strong> has ten elements, as does <strong>5 &lt;= i &lt; 15</strong>.</p>

<p>&bull; In iterative algorithms that count from zero, the current
value of the count always equals the number of previous
iterations.</p>

<p>&bull; For a zero-origin array, the index indicates the
displacement from the origin.</p>

<p>I believe that the language should adapt to the user when at all possible, not the other way around. However, Dijkstra makes a lot of points that are very difficult to counter. At least for my decidedly un-mathy brain.</p>
]]></content>
  </entry>
  
</feed>
